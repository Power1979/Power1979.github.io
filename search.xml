<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>UEFI PCIe</title>
      <link href="/2021/12/11/PCIE/"/>
      <url>/2021/12/11/PCIE/</url>
      
        <content type="html"><![CDATA[<h1 id="PCIE"><a href="#PCIE" class="headerlink" title="PCIE"></a>PCIE</h1><p>链接</p><p>①<a href="https://zhuanlan.zhihu.com/p/26244141">知乎老狼</a></p><hr><p>①什么是PCI？</p><p>答：PCI总线是一种具有多路复用地址和数据线的高性能32位或64位总线。</p><p>②PCI总线的作用？</p><p>答：用作高度集成的外围控制器组件、外围插件卡和处理器/内存系统之间的互连机制。</p><p>③PCI设计的初衷？</p><p>答：当PCI本地总线规范最初于1992年开发时，面向图形的操作系统(如Windows和OS/2)在标准PCI /O架构中造成了处理器和其显示外设之间的数据瓶颈。将高带宽要求的外围功能移到更靠近系统处理器总线的位置可以消除这个瓶颈。当使用“本地总线”设计时，图形用户界面(gui)和其他高带宽功能(如全动态视频、SCSI、lan等)可以看到实质性的性能提升。</p><p>④IO访问和MMIO访问的区别？</p><p>答：X86的CPU只支持16位的I/O空间，限制了PCI的I/O Address Space 最大只有64K。PCIe设备最多支持8种功能，每一条PCIe总线最多支持32个设备，而每一个PCI总线最多支持256个子总线(通过PCI桥)。总的Configuration Address Space的大小为：256Byte(Function</p><p>*8functions/device *32devices/bus *256 buses/system = 16M</p><p>⑤IO和MMIO的地址访问</p><p>答：IO寄存器范围为0xCF8 -0xCFF</p><p><img src="https://s2.loli.net/2021/12/11/fRY5hxz7Z1cWpwU.png" alt="c7f9ff18f02f0a3a1ca9d17627e87145.png"></p><hr><p>PCIe总线具有以下关键技术优势：</p><p>①具有双通道、高带宽、传输速度快、灵活扩展性。采用双通道串行传输模式，类似于全双工模式。1.0版本的PCIe每个信道单方向的传输速率为2.5Gbps。PCIe的物理层上提供X1、X2、X4、X8、X16、X32模式的可选择的通道，可根据用户需求配置不同的通道，同时该机制也大大提高了传输信号的带宽。</p><p><img src="https://s2.loli.net/2021/12/11/FUDu81aCjAdGVez.png" alt="0a5b7fa58bd5ff3707858577628faede.png"></p><p>②设备间点对点串行互联。为每个PCIe设备分配独立的通道带宽。充分保障了各设备的带宽资源，并且不需要设备之间共享资料，提高了传输速率。</p><p>③支持设备热插拔和热交换。PCIe总线接口插槽可以像USB那样进行热插拔和热交换，使用起来非常方便。</p><p>④低功耗，并由电源管理。PCIe总线接口物理结构简单，例如x1通道只需要4根数据线实现全双工传输，即发送和接受各一对LVDS差分信号。实际上x1模式金手指分为AB两面，每一面有18根芯线引脚，且每增加一个通道，只需要扩展4根芯线。由于数据传输芯线数量较少，所以功耗也就大大降低。</p><p>⑤小型连接，且有节约空间和减少串扰的的优点。与PCI相比，具有PCIe总线设计的主板走线数量减少了将近3/4，但是传输速率却增加了三倍。主板上的布线简洁了，导致各走线间的间距可以更大，从而达到减少各走线之间的串行干扰的目的，提高了系统稳定性，且通过增加走线数量提升总线带宽的方法也就更容易实现。</p><p>⑥具有数据包和层协议架构。各层有专门的协议架构，类似于计算机网络中的OSI分层协议，该架构有利于PCIe总线在其他领域得到应用。</p><p>⑦支持多点虚拟通道。PCIe总线接口中的每个物理通道的通信都可由8个虚拟通道控制，并可以设置不同的优先等级，这种特点可以有效的提高数据的传输率。</p><p>⑧与PCI总线驱动完全兼容。PCIe的软件层驱动部分可以完全由原有的PCI总线的驱动程序移植生成。</p><hr><h4 id="PCIe总线协议"><a href="#PCIe总线协议" class="headerlink" title="PCIe总线协议"></a>PCIe总线协议</h4><p>系统拓扑结构、层次结构、事务机制、配置空间、</p><p>1、PCIe总线系统拓扑结构</p><p>①由一系列的点到点的链路设备相互组成。</p><p>②PCIe的拓扑结构的基本元素包括：根联合体(Root Cpmplex)、与根联合体相连的CPU、主存储器(Memory)、交换器(Switch)、端点(Endpoints)、PCI Exoress到PCI的桥(PCI Express-PCI Bridge)等</p><p>下图为PCIe总线系统拓扑结构图</p><p><img src="https://s2.loli.net/2021/12/11/rwpPl1WxVZsko8Q.png" alt="6ea06c4e61fb57d4f2ec05cc24d9a156.png"></p><p>一、PCIe拓扑结构的基本元素：</p><p>1、根联合体：I/O层次结构的根设备，将CPU和系统主存储器子系统连到I/O上，功能相当于PCI系统中的北桥。根联合体支持一个以上PCIe端口，且每一个端口都定义了一条PCIe的链路结构。根联合体可以代表CPU访问主存储器及开启PCIe事务，还可以接收PCIe设备发送过来的访问主存储器的请求，起到事务在端口间传输路由的作用。</p><p>2、交换器：交换器相当于一个具有多个虚拟PCI-PCI桥逻辑功能的设备集合，它可以将事务从任意一个端口路由到另一个端口。它的端口数有2~n个，每一个端口连接一条PCIe链路，各设备间的交互就是通过这种方式实现的。</p><p>3、端点：端点是一个具备的设备，在PCIe事务中充当请求者或完成者的角色，具有两种类型的端点：纯粹的(Native)PCIe端点和传统的(Legacy)PCIe端点。前者不支持IO和锁定事务，只支持MSI中断方式；后者支持IO事务，也支持传统的中断生成方法，也包括MIS中断方式。指的是能够发出请求并且能够完成PCIe传输的设备。</p><p>4、PCIe到PCI的桥：PCIe Express到PCI的桥提供PCIe架构到PCI层次结构的连接，其中PCIe端口必须遵循PCIe协议，原来基于PCI总线的设备可以进入PCIe系统中。</p><hr><p>二、PCIe的层次结构</p><p>①PCIe体系结构采用分层设计，类似于计算机网络通信中ISO/OSI七层结构，而PCIe的核心层次有三层，PCIe的层次结构如下图所示：</p><p><img src="https://s2.loli.net/2021/12/11/G9uKxJqiLXryPn2.png" alt="441dfc937b4e60d9d6934a3696fd4fa4.png"></p><p>②从上往下层分别为：事务层（Transaction Layer）、数据链路层(Link Layer)和物理层(Physical Layer)。实际上在事务层之上还包括软基层（Software Layer）。设备之间的通信，等效于各设备对应层次之间的数据包交换。</p><p>1、物理层</p><p>物理层是最底层，是物理接口之间的连接，位于数据链路层与链路之间。物理层体现PCIe总线接口的物理特性，如通道数、LVDS驱动、点对点串行连接等。物理层的主要任务是：一是接受物理层的保温并传送至数据链路层；二是发送数据链路层的DLLP到物理层。通过8/10b解码方式，时钟信息被编码成数据形式，这种方式比单独采用并行时钟的方式更能提高传输效率和节省传输通道。该层提供了x1、x2、x4、x8、x12、x16和x32方式的信道带宽，总线带宽的计算公式为：</p><p>串行总线带宽(MB/s)=串行总线时钟频率(Hz)×总线通道数×1/8（bit）</p><p>2、数据链路层</p><p>数据链路层是事务层和物理层的中间层，其主要职责是在链路中提供这两个层次之间交换TLPs的可靠机制。事务层向数据链路层传输数据包时，在报文中添加序列号和发送冗余校验码，数据链路层依靠ACK/NAK协议来保证报文的可靠传输，使用CRC校验检测DLLPs和TLPs数据包的数据完整性。该层对链路管理功能包括TLP确认、电源确认以及流量控制(fflow-control)信息交换等。</p><p>3、事务层</p><p>事务层的职责是组装和拆解事务层数据包(TLPs)，一端接收PCIe设备核心层的数据请求。形成事务，创建TLPs传输至数据链路层，一端从数据链路层接收响应数据包。有些请求包需要读回一个响应包。事务层给该层提供了四种事务类型：存储空间读取和存储空间写入事务、I/O空间读取和I/O空间写入事务、配置空间读取和写入事务、消息传递作为时间的信号告知用户事务。</p><p>4、软件层</p><p>PCIe的软件层保持与PCI总线的兼容，因此被认为是最重要的部分。PCIe启动时，系统的初始化和运行就像在PCI环境下，不需要对系统中的资源和硬件设备进行任何改动。在软件相应时间模式上，PCIe支持PCI的共享内存模式、本地存储。事实上，在PCIe平台中，完全可以实现PCIe总线到PCI总线软件上的平稳过渡。</p><hr><p>PCIe线路图</p><p><img src="https://s2.loli.net/2021/12/11/VMfeaknRFGwAUBW.png" alt="225f56b1eff3fe25baeb6f2ed9afaf57.png"></p><p>PCIe设备编号：</p><p>①每一个PCIe Function都有一个唯一的PFA(PCI Function Address)。PFA由bus number、device number、function number 组成。</p><p>②在PFA中，Bus Number占用8位，Device Number占用5位，Function Number占用3位。显然，PCIe总线最多支持256个子总线，每个子总线最多支持32个设备，每个设备最多支持8个功能。</p><p><img src="https://s2.loli.net/2021/12/11/kbzy1AQ24na6pgO.png" alt="eade79977dec4a3b8cc1f16d2cce842a.png"></p><hr><p>PCIe Device的地址映射</p><p><img src="https://s2.loli.net/2021/12/11/GU8sTQ7hlDtz6Fk.png" alt="3f58178b373596ca2f8655bca77ac3bb.png"></p><hr><p>PCIe配置空间</p><p>PCIe spec规定PCIe设备必须提供独立的配置空间。配置空间里面存储了一些基本信息，如生产商、设备ID、设备型、IRQ中断号，还有内部IO空间和MMIO空间的起始地址和大小。</p><p>每个Function(功能)有自己的4k配置空间。</p><p>PCIe配置空间由两部分组成：PCI兼容配置空间(256Byte)和PCIe扩展配置空间。</p><p>配置空间的定义分为两个Type，Type0和Type1。Type0定义Device，Type1定义Bridge。</p><hr><p>Type 0 Endpoint（终端设备）的配置</p><p><img src="https://s2.loli.net/2021/12/11/aP58bgOloxcn9N3.png" alt="4c653d2b009290a8d3d6037906682011.png"></p><p>Type 1 Bridge(桥接器)的配置</p><p><img src="https://s2.loli.net/2021/12/11/bvBV3ymhWUscS5d.png" alt="cc7caba9799954e1c837cc1509dd9c21.png"></p><hr><p>知乎老狼</p><p>①PCI spec规定了PCI设备必须提供的单独地址空间：配置空间（configuration space）,前64个字节（其地址范围为0x00<del>0x3F）是所有PCI设备必须支持的（有不少简单的设备也仅支持这些），此外PCI/PCI-X还扩展了0x40</del>0xFF这段配置空间，在这段空间主要存放一些与MSI或者MSI-X中断机制和电源管理相关的Capability结构。</p><p>②前文提到过，PCI配置空间和内存空间是分离的，那么如何访问这段空间呢？我们首先要对所有的PCI设备进行编码以避免冲突，通常我们是以三段编码来区分PCI设备，即Bus Number, Device Number和Function Number,以后我们简称他们为BDF。有了BDF我们既可以唯一确定某一PCI设备。不同的芯片厂商访问配置空间的方法略有不同，我们以Intel的芯片组为例，其使用IO空间的CF8h/CFCh地址来访问PCI设备的配置寄存器。</p><p><img src="https://s2.loli.net/2021/12/11/EVe7JyD9PU2kZ4c.png" alt="15d5c811f6a902d1fa1c01bb8b935be1.png"></p><p>1、CF8h: CONFIG_ADDRESS。PCI配置空间地址端口</p><p>2、CFCh: CONFIG_DATA。PCI配置空间数据端口。</p><p>3、CONFIG_ADDRESS寄存器格式：</p><p>31 位：Enabled位。</p><p>23:16 位：总线编号。</p><p>15:11 位：设备编号。</p><p>10: 8 位：功能编号。</p><p>7: 2 位：配置空间寄存器编号。</p><p>1: 0 位：恒为“00”。这是因为CF8h、CFCh端口是32位端口。</p><p>③</p><p>PCIe规范在PCI规范的基础上，将配置空间扩展到4KB。原来的CF8/CFC方法仍然可以访问所有PCIe设备配置空间的头255B，但是该方法访问不了剩下的（4K-255）配置空间。怎么办呢？Intel提供了另外一种PCIe配置空间访问方法：通过将配置空间映射到Memory map IO（MMIO）空间，对PCIe配置空间可以像对内存一样进行读写访问了。</p><p><img src="https://s2.loli.net/2021/12/11/QrmeAUpnY546gWP.png" alt="74c99711204946206c8a7abb142fd559.png"></p><p>这样再加上PCI板子上的RAM或者ROM，整个PCIe Device空间。</p><p><img src="https://s2.loli.net/2021/12/11/afSet7cjR1lqvFL.png" alt="f6912f6da13e969b81ee0fc86b42fb40.png"></p><p>④MMIO这段空间有256MB，因为按照PCIe规范，支持最多256个buses，每个Bus支持最多32个PCI devices，每个device支持最多8个function,也就是说：占用内存的最大值为：256 * 32 * 8 * 4K = 256MB。在台式机上我们很多时候觉得占用256MB空间太浪费（造成4G以下memory可用空间变少，虽然实际memory可以映射到4G以上，但对32位OS影响很大），PCI Bus也没有那么多，所以可以设置成最低64MB，即最多64个Bus。那么这个256MB的MMIO空间在在哪里呢？我们以Intel的Haswell平台为例</p><p><img src="https://s2.loli.net/2021/12/11/GeWNv8XAgElYzmI.png" alt="ad3526f07cab4cb0394ae9a7fe814623.png"></p><hr><p>软件访问</p><p><img src="https://s2.loli.net/2021/12/11/fYCilNS4QZvLO3y.png" alt="5e37661dfc1f9f61a304594c70b88ede.png"></p><p><img src="https://s2.loli.net/2021/12/11/Dv4tu5LyaRgPVTq.png" alt="7159e4bf6d7fd6feb608c1d0c27ef50e.png"></p>]]></content>
      
      
      <categories>
          
          <category> PCIe </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PCIe </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UEFI edk2 环境搭建(VS2019版)</title>
      <link href="/2021/08/01/edk2%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
      <url>/2021/08/01/edk2%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<p>﻿## UEFI edk2 环境搭建(VS2019版)</p><p>@<a href="**********************%E7%9B%AE%E5%BD%95%E7%B4%A2%E5%BC%95**********************">TOC</a></p><h3 id="一、软件准备"><a href="#一、软件准备" class="headerlink" title="一、软件准备"></a>一、软件准备</h3><p> ①<a href="https://visualstudio.microsoft.com/zh-hans/vs/whatsnew/">VS2019 下载社区版 安装如下配置</a><br><img src="https://img-blog.csdnimg.cn/2b621dc5f5804be4a53e7a4be86dd905.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAVGVjaG5vbG9neTE5Nzg=,size_11,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="VS2019"></p><p>②<a href="https://github.com/tianocore/edk2">edk2 可用git下载和更新完整edk2文件</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https:<span class="comment">//github.com/tianocore/edk2.git</span></span><br><span class="line">cd edk2</span><br><span class="line">git submodule update --init</span><br></pre></td></tr></table></figure><p>③<a href="https://www.python.org/getit/">Python3.8 记得勾选添加Path路径</a><br>④<a href="https://www.nasm.us/pub/nasm/releasebuilds/?C=M;O=D">NASM</a><br>⑤<a href="https://www.acpica.org/downloads/binary-tools">IASL</a></p><h3 id="二、设置环境变量"><a href="#二、设置环境变量" class="headerlink" title="二、设置环境变量"></a>二、设置环境变量</h3><p><img src="https://img-blog.csdnimg.cn/f8c3467bd31740f9a14afeb2f2351073.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAVGVjaG5vbG9neTE5Nzg=,size_14,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="环境变量"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//需要设置的环境变量，path也要设置对应的路径</span></span><br><span class="line">① NASM_PREFIX：C:\NASM\</span><br><span class="line">② IASL_PREFIX：C:\ASL\</span><br><span class="line">③ WORKSPACE：E:\EFIwork\edk2\</span><br><span class="line">④ PYTHON_HOME：C:\Python\</span><br><span class="line">⑤ PYTHON_FREEZER_PATH：%PYTHON_HOME%\Scripts\</span><br></pre></td></tr></table></figure><h3 id="三、编译edk2"><a href="#三、编译edk2" class="headerlink" title="三、编译edk2"></a>三、编译edk2</h3><p> ①在 edk 目录下打开cmd 运行 edksetup.bat （可在目录上输入cmd打开）<br><img src="https://img-blog.csdnimg.cn/5e1b3139e21244abae4f84c04e05d4ed.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAVGVjaG5vbG9neTE5Nzg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="edk2"><br><img src="https://img-blog.csdnimg.cn/4db25834d48743189f06a5d913cca22e.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAVGVjaG5vbG9neTE5Nzg=,size_19,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="cmd"></p><p>②修改Conf目录下的配置文件<br><img src="https://img-blog.csdnimg.cn/4880ed4161844a07b1baf7730fbca3f4.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAVGVjaG5vbG9neTE5Nzg=,size_17,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//修改以下配置信息 本文所用的是VS2019 X64环境，可根据个人配置环境修改</span><br><span class="line">TOOL_CHAIN_TAG = VS2019</span><br><span class="line">TARGET_ARCH = X64</span><br><span class="line">TARGET = DEBUG</span><br><span class="line">ACTIVE_PLATFORM = EmulatorPkg/EmulatorPkg.dsc</span><br></pre></td></tr></table></figure><blockquote><p>解释：<br>1、TOOL_CHAIN_TAG :编译器环境 如VS2019<br> 2、TARGET_ARCH: 目标平台，可以是IA32、X64、IPF、ARM或EBC<br> 3、 TARGET:选择编译成DEBUG还是RELEASE<br> 4、 ACTIVE_PLATFORM：通过指定,dsc文件指定要编译的Package</p></blockquote><p>③修改完成后，接着在命令行输入edksetup.bat Rebuild</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">edksetup.bat Rebuild</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/62d7e20c24c34fc7b24467cb0c240bac.png#pic_center" alt="cmd"><br>④cmd运行build</p><p><img src="https://img-blog.csdnimg.cn/af9cdc473d4b44a1b1db905a490d5c4c.png#pic_center" alt="cmd"></p><blockquote><p>build的参数如下</p></blockquote><p><img src="https://img-blog.csdnimg.cn/a53633090fa346639c0eea13c877006f.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAVGVjaG5vbG9neTE5Nzg=,size_16,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/e3bc1f4e7eab43388b5ef6a74b96f2f4.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAVGVjaG5vbG9neTE5Nzg=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> edk2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> edk2环境搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言不用临时变量交换两变量问题</title>
      <link href="/2020/04/04/C%E8%AF%AD%E8%A8%80%E5%8F%98%E9%87%8F%E7%9A%84%E4%BA%A4%E6%8D%A2%E6%96%B9%E5%BC%8F-%E4%B8%8D%E7%94%A8%E4%B8%B4%E6%97%B6%E5%8F%98%E9%87%8F/"/>
      <url>/2020/04/04/C%E8%AF%AD%E8%A8%80%E5%8F%98%E9%87%8F%E7%9A%84%E4%BA%A4%E6%8D%A2%E6%96%B9%E5%BC%8F-%E4%B8%8D%E7%94%A8%E4%B8%B4%E6%97%B6%E5%8F%98%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="除了这种用临时变量交换的方式，还可以用异或"><a href="#除了这种用临时变量交换的方式，还可以用异或" class="headerlink" title="除了这种用临时变量交换的方式，还可以用异或"></a>除了这种用临时变量交换的方式，还可以用异或</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//临时变量</span><br><span class="line">int a=0,b=1;</span><br><span class="line">int temp;</span><br><span class="line">temp=a; </span><br><span class="line">a=b;</span><br><span class="line">b=temp;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//根据a^b^b=a </span><br><span class="line">int a=0,b=1;</span><br><span class="line">a=a^b;  //a=1</span><br><span class="line">b=a^b;  //b=0</span><br><span class="line">a=a^b;  //a=1</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言变量 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
